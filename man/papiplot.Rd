% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cacheplot.r, R/papiplot.r
\name{papiplot.papi_cache}
\alias{papiplot}
\alias{papiplot.papi_cache}
\title{Plots Cacahe Misses}
\usage{
\method{papiplot}{papi_cache}(x, ..., title, opnames, color = FALSE,
  facet.by = "operation", bar.label = FALSE)

papiplot(x, ...)
}
\arguments{
\item{x}{PAPI object.}

\item{...}{Additional objects.}

\item{title}{The label for the plot title. Should be a character string of
your choice, \code{NULL} for no label, or left blank for
the default plot label.  In the latter case, this is chosen
based on the input data.}

\item{opnames}{An optional argument to specify different names for the 
expressions/operations used to generate the profiler data.}

\item{color}{Logical; should different groups be colored?}

\item{facet.by}{Choice to facet cache plots by the different expressions/operations
(\code{facet.by="operation"}), or by the cache level (\code{facet.by="level"}).}

\item{bar.label}{Logical; should numeric values of heights of bars be shown?}
}
\value{
A ggplot2 object.
}
\description{
Plots Cacahe Misses

Create plots from PAPI performance counter data.
}
\details{
One may wonder why we do not simply overload \code{plot()}. In fact
that was the original incarnation of this package.  However,
overloading \code{plot()} leads to several issues.  Simply,
the basic plot command is *too* overloaded.  This makes it
difficult to find documentation, view function arguments, etc.
Using \code{papiplot()}, finding help is easier, and one can
also enjoy function argument autocompletion via the tab key.
}
\examples{
\dontrun{
library(pbdPAPI)
x <- system.cache(rnorm(1e4))
y <- system.cache(rnorm(4e4))
z <- system.cache(rnorm(8e4))

library(hpcvis)
papiplot(x)
papiplot(x, opnames=NULL)

opnames <- c("small", "medium", "large")
papiplot(x, y, z, opnames=opnames)
papiplot(x, y, z, opnames=opnames, color=TRUE, facet.by="level")
}

}

